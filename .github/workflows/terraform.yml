name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.TF_VAR_SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ".github/workflows"

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ".github/workflows"

      - name: Terraform Plan
        id: plan
        run: terraform plan
        working-directory: ".github/workflows"

      - name: Terraform Apply
        run: terraform apply --auto-approve
        working-directory: ".github/workflows"

      - name: Get IP Address
        run: |
          export IP=$(terraform output ip)
          echo "VM Started on ${IP}"
        working-directory: ".github/workflows"

      - name: Add hostname to /etc/hosts
        run: echo "$(terraform -chdir=./.github/workflows output --raw ip)  quay" | sudo tee -a /etc/hosts; sudo cat /etc/hosts

      - name: Wait for VM
        uses: jakejarvis/wait-action@master
        with:
          time: "60s"

      - name: Run playbook
        run: ansible-playbook p_install-mirror-appliance.yml -i quay,

      - name: Install oc
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: "4.6"

      - name: Wait for Quay
        run: timeout 300 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' https://quay/health/instance)" != "200" ]]; do sleep 5; echo https://quay/health/instance; done'

      - name: Create Init User
        run: 'curl --insecure -H ''Content-Type: application/json'' --data ''{"username":"init","password":"password","access_token":"true"}'' https://quay/api/v1/user/initialize'

      - name: Log in to Quay.io
        run: podman login  $(terraform -chdir=./.github/workflows output --raw ip) --tls-verify=false -u init -p password

      - name: Write Pull Secret
        run: 'echo "$PULL_SECRET" > /home/runner/work/quay-ansible/quay-ansible/pull-secret.json; chmod 777 /home/runner/work/quay-ansible/quay-ansible/pull-secret.json'
        shell: bash
        env:
          PULL_SECRET: ${{ secrets.PULL_SECRET }}

      - name: Write mirror pull secret
        run: 'echo "{\"auths\": {\"quay\": {\"auth\": \"$(echo -n init:password | base64 -w0)\", \"email\":\"you@example.com\"}}}"  > /home/runner/work/quay-ansible/quay-ansible/mirror-secret.json; chmod 777 /home/runner/work/quay-ansible/quay-ansible/mirror-secret.json'

      - name: Merge secrets
        run: "jq -s '.[0] * .[1]' /home/runner/work/quay-ansible/quay-ansible/pull-secret.json /home/runner/work/quay-ansible/quay-ansible/mirror-secret.json > /home/runner/work/quay-ansible/quay-ansible/merged-secret.json; chmod 777 /home/runner/work/quay-ansible/quay-ansible/merged-secret.json; cat /home/runner/work/quay-ansible/quay-ansible/merged-secret.json"

      - name: Mirror OCP Images
        run: |
          oc adm release mirror -a ${LOCAL_SECRET_JSON}  \
          --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE}-${ARCHITECTURE} \
          --to=quay/${LOCAL_REPOSITORY} \
          --to-release-image=quay/${LOCAL_REPOSITORY}:${OCP_RELEASE}-${ARCHITECTURE} \
          --insecure
        env:
          OCP_RELEASE: 4.5.4
          LOCAL_REPOSITORY: "init/openshift4"
          PRODUCT_REPO: "openshift-release-dev"
          LOCAL_SECRET_JSON: "/home/runner/work/quay-ansible/quay-ansible/merged-secret.json"
          RELEASE_NAME: "ocp-release"
          ARCHITECTURE: "x86_64"

      - name: Terraform Destroy
        run: terraform destroy --auto-approve
        if: always()
        working-directory: ".github/workflows"
